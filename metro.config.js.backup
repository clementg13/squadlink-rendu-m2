const { getDefaultConfig } = require('@expo/metro-config');
const path = require('path');

// Configuration Metro ultra-robuste pour EAS Build
const config = getDefaultConfig(__dirname);

// Debug
console.log('ðŸ”§ [Metro] Loading config from:', __dirname);
console.log('ðŸ”§ [Metro] Project structure check:');
console.log('  - constants/:', require('fs').existsSync(path.join(__dirname, 'constants')));
console.log('  - stores/:', require('fs').existsSync(path.join(__dirname, 'stores')));

// S'assurer que resolver existe
if (!config.resolver) {
  config.resolver = {};
}

// Configuration des alias avec chemins absolus
const projectRoot = path.resolve(__dirname);
config.resolver.alias = {
  '@': projectRoot,
  '@/components': path.resolve(projectRoot, 'components'),
  '@/constants': path.resolve(projectRoot, 'constants'),
  '@/hooks': path.resolve(projectRoot, 'hooks'),
  '@/lib': path.resolve(projectRoot, 'lib'),
  '@/services': path.resolve(projectRoot, 'services'),
  '@/stores': path.resolve(projectRoot, 'stores'),
  '@/types': path.resolve(projectRoot, 'types'),
  '@/assets': path.resolve(projectRoot, 'assets'),
};

console.log('ðŸ”§ [Metro] Aliases configured:', Object.keys(config.resolver.alias));

// Configuration Sentry
config.transformer.minifierConfig = {
  ...config.transformer.minifierConfig,
  keep_fnames: true,
  mangle: {
    keep_fnames: true,
  },
};

module.exports = config;
