import { supabase } from '@/lib/supabase';
import { UserProfile, Location, Gym, GymSubscription, Hobbie } from '@/types/profile';
import { CompatibleProfile } from '@/services/compatibleProfileService';

/**
 * Service pour g√©rer les appels aux fonctions Supabase li√©es aux profils utilisateur
 * Note: Les profils compatibles sont maintenant g√©r√©s par CompatibleProfileService
 */
export class ProfileService {
  // Cache pour stocker les profils
  private static profileCache = new Map<string, any>();
  private static lastCacheUpdate = new Map<string, number>();

  // === Profile Management ===
  async getProfile(userId: string, forceRefresh = false): Promise<UserProfile | null> {
    const cacheKey = `profile_${userId}`;
    const now = Date.now();
    const cacheExpiry = 30000; // 30 secondes

    // V√©rifier le cache si pas de force refresh
    if (!forceRefresh && 
        ProfileService.profileCache.has(cacheKey) && 
        ProfileService.lastCacheUpdate.has(cacheKey) &&
        (now - ProfileService.lastCacheUpdate.get(cacheKey)!) < cacheExpiry) {
      console.log('üìã ProfileService: Returning cached profile');
      return ProfileService.profileCache.get(cacheKey);
    }

    console.log('üîç ProfileService: Loading complete profile with all relations for user:', userId);
    console.log('üîÑ ProfileService: Force refresh:', forceRefresh);

    // R√©cup√©rer le profil avec toutes les relations
    const { data, error } = await supabase
      .schema('musclemeet') // ‚úÖ Sp√©cifier le sch√©ma pour coh√©rence
      .from('profile')
      .select(`
        *,
        location(*),
        gym(*),
        gymsubscription(*)
      `)
      .eq('id_user', userId)
      .single();

    if (error && error.code !== 'PGRST116') {
      console.error('‚ùå ProfileService: Failed to load profile:', error);
      throw error;
    }

    if (!data) {
      console.log('üì≠ ProfileService: No profile found for user:', userId);
      return null;
    }

    console.log('‚úÖ ProfileService: Base profile loaded:', {
      id: data.id,
      firstname: data.firstname,
      lastname: data.lastname,
      hasLocation: !!data.location,
      hasGym: !!data.gym,
      hasGymSubscription: !!data.gymsubscription,
      id_gym: data.id_gym,
      id_gymsubscription: data.id_gymsubscription,
      gym_name: data.gym?.name,
      gymsubscription_name: data.gymsubscription?.name,
      gymsubscription_id_gym: data.gymsubscription?.id_gym
    });

    // R√©cup√©rer les sports du profil
    const { data: sportsData, error: sportsError } = await supabase
      .schema('musclemeet')
      .from('profilesport')
      .select(`
        *,
        sport(*),
        sportlevel(*)
      `)
      .eq('id_profile', data.id);

    if (sportsError) {
      console.warn('‚ö†Ô∏è ProfileService: Failed to load sports:', sportsError);
    } else {
      console.log('‚úÖ ProfileService: Sports loaded:', sportsData?.length || 0);
    }

    // R√©cup√©rer les hobbies du profil
    const { data: hobbiesData, error: hobbiesError } = await supabase
      .from('profilehobbie')
      .select(`
        *,
        hobbie(*)
      `)
      .eq('id_profile', data.id);

    if (hobbiesError) {
      console.warn('‚ö†Ô∏è ProfileService: Failed to load hobbies:', hobbiesError);
    } else {
      console.log('‚úÖ ProfileService: Hobbies loaded:', hobbiesData?.length || 0);
    }

    // R√©cup√©rer les r√©seaux sociaux du profil
    const { data: socialMediaData, error: socialMediaError } = await supabase
      .from('profilesocialmedia')
      .select(`
        *,
        socialmedia(*)
      `)
      .eq('id_profile', data.id);

    if (socialMediaError) {
      console.warn('‚ö†Ô∏è ProfileService: Failed to load social media:', socialMediaError);
    } else {
      console.log('‚úÖ ProfileService: Social media loaded:', socialMediaData?.length || 0);
    }

    // Construire le profil complet avec toutes les donn√©es
    const completeProfile = {
      ...data,
      sports: sportsData || [],
      hobbies: hobbiesData || [],
      socialMedias: socialMediaData || []
    };

    console.log('‚úÖ ProfileService: Complete profile assembled:', {
      location: data.location ? 'YES' : 'NO',
      gym: data.gym ? `YES (${data.gym.name})` : 'NO',
      gymSubscription: data.gymsubscription ? `YES (${data.gymsubscription.name})` : 'NO',
      sportsCount: sportsData?.length || 0,
      hobbiesCount: hobbiesData?.length || 0,
      socialMediaCount: socialMediaData?.length || 0
    });
    
    // Stocker en cache
    ProfileService.profileCache.set(cacheKey, completeProfile);
    ProfileService.lastCacheUpdate.set(cacheKey, now);
    
    return completeProfile;
  }

  async createProfile(userId: string): Promise<UserProfile> {
    const { data, error } = await supabase
      .from('profile')
      .insert([{
        id_user: userId,
        fully_completed: false,
        created_at: new Date().toISOString(),
      }])
      .select('*')
      .single();

    if (error) throw error;
    return data;
  }

  async updateProfile(userId: string, updates: Partial<UserProfile>): Promise<UserProfile> {
    console.log('üîÑ ProfileService: Starting updateProfile for user:', userId);
    console.log('üîÑ ProfileService: Raw updates received:', updates);

    // Nettoyer les donn√©es avant mise √† jour
    const cleanUpdates = { ...updates };
    
    // Supprimer les champs calcul√©s/joints qui ne doivent pas √™tre mis √† jour
    delete cleanUpdates.id_user;
    delete cleanUpdates.created_at;
    delete cleanUpdates.updated_at;
    
    // G√©rer la date de naissance avec validation
    if ('birthdate' in cleanUpdates) {
      if (!cleanUpdates.birthdate) {
        // Si birthdate est vide, null ou undefined, on la supprime du payload
        delete cleanUpdates.birthdate;
      } else if (
        cleanUpdates.birthdate !== null &&
        typeof cleanUpdates.birthdate === 'object' &&
        Object.prototype.toString.call(cleanUpdates.birthdate) === '[object Date]'
      ) {
        // Convertir Date en string format YYYY-MM-DD
        cleanUpdates.birthdate = (cleanUpdates.birthdate as Date).toISOString().split('T')[0];
      } else if (typeof cleanUpdates.birthdate === 'string') {
        // Valider le format de date string
        const dateStr = cleanUpdates.birthdate.trim();
        if (dateStr === '') {
          // String vide - supprimer du payload
          delete cleanUpdates.birthdate;
        } else {
          // V√©rifier que c'est une date valide
          const dateObj = new Date(dateStr);
          if (isNaN(dateObj.getTime())) {
            console.warn('‚ö†Ô∏è ProfileService: Invalid date format:', dateStr);
            delete cleanUpdates.birthdate;
          } else {
            // Format correct YYYY-MM-DD
            cleanUpdates.birthdate = dateObj.toISOString().split('T')[0];
          }
        }
      }
    }

    // Nettoyer les strings vides pour √©viter les erreurs de base de donn√©es
    Object.keys(cleanUpdates).forEach(key => {
      const value = cleanUpdates[key as keyof UserProfile];
      if (typeof value === 'string' && value.trim() === '') {
        // Supprimer les strings vides plut√¥t que d'envoyer des valeurs vides
        delete cleanUpdates[key as keyof UserProfile];
      }
    });

    console.log('üìù ProfileService: Updating profile for user:', userId);
    console.log('üìù ProfileService: Clean update payload:', cleanUpdates);

    // V√©rifier que l'utilisateur existe d'abord
    const { data: existingProfile, error: checkError } = await supabase
      .from('profile')
      .select('id, id_user')
      .eq('id_user', userId)
      .single();

    if (checkError) {
      console.error('‚ùå ProfileService: User profile not found:', checkError);
      throw new Error('Profil utilisateur non trouv√©');
    }

    console.log('‚úÖ ProfileService: Existing profile found:', existingProfile);

    // Ne rien faire si aucune donn√©es √† mettre √† jour
    if (Object.keys(cleanUpdates).length === 0) {
      console.log('üìù ProfileService: No data to update, returning current profile');
      return await this.getProfile(userId, true) as UserProfile;
    }

    // Effectuer la mise √† jour
    console.log('üöÄ ProfileService: Executing update query...');
    const { data, error } = await supabase
      .from('profile')
      .update(cleanUpdates)
      .eq('id_user', userId)
      .select('*')
      .single();

    if (error) {
      console.error('‚ùå ProfileService: Profile update failed:', error);
      console.error('‚ùå ProfileService: Error details:', {
        code: error.code,
        message: error.message,
        details: error.details,
        hint: error.hint
      });
      throw error;
    }

    if (!data) {
      console.error('‚ùå ProfileService: No data returned after update');
      throw new Error('Aucune donn√©e retourn√©e apr√®s la mise √† jour');
    }

    console.log('‚úÖ ProfileService: Profile updated successfully:', data);
    
    // Invalider le cache apr√®s mise √† jour
    this.invalidateProfileCache(userId);
    
    // V√©rifier que les donn√©es ont bien √©t√© sauvegard√©es
    const verificationProfile = await this.forceReloadProfile(userId);
    console.log('üîç ProfileService: Verification profile after update:', verificationProfile);
    
    return data;
  }

  // === Location Management ===
  async updateLocation(userId: string, locationData: { town: string; postal_code: number; latitude: number; longitude: number }): Promise<void> {
    try {
      console.log('üìç ProfileService: Updating location for user:', userId);
      
      // 1. Cr√©er la nouvelle localisation
      const locationPayload = {
        town: locationData.town,
        postal_code: locationData.postal_code,
        location: `POINT(${locationData.longitude} ${locationData.latitude})`
      };

      const { data: newLocation, error: locationError } = await supabase
        .from('location')
        .insert(locationPayload)
        .select('*')
        .single();

      if (locationError) {
        console.error('‚ùå ProfileService: Location creation failed:', locationError);
        throw locationError;
      }

      // 2. Mettre √† jour le profil avec la nouvelle localisation
      const { error: profileError } = await supabase
        .from('profile')
        .update({ id_location: newLocation.id })
        .eq('id_user', userId);

      if (profileError) {
        console.error('‚ùå ProfileService: Profile location update failed:', profileError);
        throw profileError;
      }

      console.log('‚úÖ ProfileService: Location updated successfully');
      
      // Invalider le cache apr√®s mise √† jour de la localisation
      this.invalidateProfileCache(userId);
    } catch (error) {
      console.error('‚ùå ProfileService: Location update error:', error);
      throw error;
    }
  }

  // === Related Data Fetchers ===
  async getLocationDetails(locationId: string): Promise<Location | null> {
    const { data, error } = await supabase
      .from('location')
      .select('*')
      .eq('id', locationId)
      .single();

    return error ? null : data;
  }

  async getGymDetails(gymId: string): Promise<Gym | null> {
    const { data, error } = await supabase
      .from('gym')
      .select('*')
      .eq('id', gymId)
      .single();

    return error ? null : data;
  }

  async getGymSubscriptionDetails(subscriptionId: string): Promise<GymSubscription | null> {
    const { data, error } = await supabase
      .from('gymsubscription')
      .select('*')
      .eq('id', subscriptionId)
      .single();

    return error ? null : data;
  }

  // === Reference Data ===
  async getAllGyms(): Promise<Gym[]> {
    const { data, error } = await supabase
      .from('gym')
      .select('*')
      .order('name');

    if (error) throw error;
    return data || [];
  }

  async getAllHobbies(): Promise<Hobbie[]> {
    const { data, error } = await supabase
      .from('hobbie')
      .select('*')
      .order('name');

    if (error) throw error;
    return data || [];
  }

  /**
   * R√©cup√®re les d√©tails complets d'un profil √† partir de son user_id
   * @param userId - ID de l'utilisateur
   * @returns Promise<CompatibleProfile | null>
   */
  async getProfileDetails(userId: string, forceRefresh = false): Promise<CompatibleProfile | null> {
    const cacheKey = `profile_details_${userId}`;
    const now = Date.now();
    const cacheExpiry = 30000; // 30 secondes

    // V√©rifier le cache si pas de force refresh
    if (!forceRefresh && 
        ProfileService.profileCache.has(cacheKey) && 
        ProfileService.lastCacheUpdate.has(cacheKey) &&
        (now - ProfileService.lastCacheUpdate.get(cacheKey)!) < cacheExpiry) {
      return ProfileService.profileCache.get(cacheKey);
    }

    try {
      // Utiliser la fonction RPC Supabase
      const { data, error } = await supabase
        .rpc('get_profile_details', {
          target_user_id: userId
        });

      if (error) {
        console.error('‚ùå ProfileService: Failed to fetch profile details:', error);
        return null;
      }

      if (!data || data.length === 0) {
        console.warn('‚ö†Ô∏è ProfileService: No profile details found for user:', userId);
        return null;
      }

      const profileData = data[0];
      console.log('‚úÖ ProfileService: Profile details loaded:', profileData);

      // Construire l'objet CompatibleProfile
      const compatibleProfile: CompatibleProfile = {
        profile_id: profileData.profile_id,
        user_id: profileData.user_id,
        firstname: profileData.firstname,
        lastname: profileData.lastname,
        biography: profileData.biography,
        compatibility_score: 0, // Pas de calcul de compatibilit√© pour les demandes
        total_count: 0,
        age: profileData.age,
        location: profileData.location || undefined,
        gym: profileData.gym || undefined,
        gymSubscription: profileData.gym_subscription || undefined,
        hobbies: profileData.hobbies || [],
        sports: profileData.sports || [],
        socialMedias: profileData.social_medias || []
      };

      // Stocker en cache
      ProfileService.profileCache.set(cacheKey, compatibleProfile);
      ProfileService.lastCacheUpdate.set(cacheKey, now);

      return compatibleProfile;
    } catch (error) {
      console.error('‚ùå ProfileService: Unexpected error fetching profile details:', error);
      return null;
    }
  }

  /**
   * Supprime le compte utilisateur et toutes ses donn√©es personnelles.
   * Utilise la fonction RPC s√©curis√©e c√¥t√© Supabase (auth_delete_current_user).
   */
  async deleteAccountAndData(): Promise<{ error?: string }> {
    try {
      const { data: { user }, error } = await supabase.auth.getUser();
      if (error || !user) {
        return { error: 'Impossible de r√©cup√©rer votre compte.' };
      }

      // Supprimer le profil utilisateur (et donn√©es li√©es si FK ON DELETE CASCADE)
      const { error: profileError } = await supabase
        .from('profile')
        .delete()
        .eq('id_user', user.id);

      if (profileError) {
        return { error: 'Erreur lors de la suppression des donn√©es du profil.' };
      }

      // Attendre un court instant pour laisser la cascade s'effectuer c√¥t√© base
      await new Promise((resolve) => setTimeout(resolve, 500));

      // Tentative de suppression du compte Supabase Auth via la fonction RPC
      const { error: rpcError, data } = await supabase.rpc('auth_delete_current_user');
      console.log('RPC delete user result:', { data, rpcError });
      if (rpcError) {
        if (rpcError.code === '23503') {
          return {
            error:
              "Impossible de supprimer votre compte car certaines de vos donn√©es sont encore r√©f√©renc√©es ailleurs (ex : groupes, matches, etc.). Veuillez d'abord quitter ou supprimer ces √©l√©ments avant de r√©essayer."
          };
        }
        return { error: 'Erreur lors de la suppression du compte utilisateur.' };
      }
      // data est null si la fonction SQL retourne void ou rien, mais la suppression a r√©ussi
      // On consid√®re donc la suppression comme un succ√®s si rpcError est null
      return {};
    } catch {
      return { error: 'Une erreur est survenue lors de la suppression du compte.' };
    }
  }

  // Nouvelle m√©thode pour invalider le cache
  invalidateProfileCache(userId: string): void {
    const cacheKey = `profile_${userId}`;
    const detailsKey = `profile_details_${userId}`;
    
    ProfileService.profileCache.delete(cacheKey);
    ProfileService.profileCache.delete(detailsKey);
    ProfileService.lastCacheUpdate.delete(cacheKey);
    ProfileService.lastCacheUpdate.delete(detailsKey);
    
    // Invalider aussi les caches li√©s
    this.invalidateRelatedCaches(userId);
  }

  // Invalider les caches li√©s au profil
  private invalidateRelatedCaches(userId: string): void {
    // Invalider le cache des profils compatibles si il existe
    const compatibleCacheKeys = Array.from(ProfileService.profileCache.keys())
      .filter(key => key.includes('compatible') || key.includes('enriched'));
    
    compatibleCacheKeys.forEach(key => {
      ProfileService.profileCache.delete(key);
      ProfileService.lastCacheUpdate.delete(key);
    });
  }

  // M√©thode publique pour forcer le rechargement complet
  async refreshProfile(userId: string): Promise<UserProfile | null> {
    this.invalidateProfileCache(userId);
    return this.getProfile(userId, true);
  }

  // Nouvelle m√©thode pour forcer un appel API complet
  async forceReloadProfile(userId: string): Promise<UserProfile | null> {
    console.log('üîÑ ProfileService: Force reload profile for user:', userId);
    
    // Vider compl√®tement le cache pour cet utilisateur
    this.invalidateProfileCache(userId);
    
    // Utiliser getProfile avec forceRefresh pour r√©cup√©rer toutes les donn√©es
    return this.getProfile(userId, true);
  }

  // M√©thode pour forcer le rechargement des d√©tails complets
  async forceReloadProfileDetails(userId: string): Promise<CompatibleProfile | null> {
    console.log('üîÑ ProfileService: Force reload profile details for user:', userId);
    
    // Vider le cache des d√©tails
    const detailsKey = `profile_details_${userId}`;
    ProfileService.profileCache.delete(detailsKey);
    ProfileService.lastCacheUpdate.delete(detailsKey);
    
    try {
      // Appel API direct pour les d√©tails complets
      const { data, error } = await supabase
        .rpc('get_profile_details', {
          target_user_id: userId
        });

      if (error) {
        console.error('‚ùå ProfileService: Force reload profile details failed:', error);
        return null;
      }

      if (!data || data.length === 0) {
        console.warn('‚ö†Ô∏è ProfileService: No profile details found for user:', userId);
        return null;
      }

      const profileData = data[0];
      console.log('‚úÖ ProfileService: Profile details force reloaded:', profileData);

      // Construire l'objet CompatibleProfile
      const compatibleProfile: CompatibleProfile = {
        profile_id: profileData.profile_id,
        user_id: profileData.user_id,
        firstname: profileData.firstname,
        lastname: profileData.lastname,
        biography: profileData.biography,
        compatibility_score: 0,
        total_count: 0,
        age: profileData.age,
        location: profileData.location || undefined,
        gym: profileData.gym || undefined,
        gymSubscription: profileData.gym_subscription || undefined,
        hobbies: profileData.hobbies || [],
        sports: profileData.sports || [],
        socialMedias: profileData.social_medias || []
      };

      // Remettre en cache
      const now = Date.now();
      ProfileService.profileCache.set(detailsKey, compatibleProfile);
      ProfileService.lastCacheUpdate.set(detailsKey, now);

      return compatibleProfile;
    } catch (error) {
      console.error('‚ùå ProfileService: Unexpected error force reloading profile details:', error);
      return null;
    }
  }

  // M√©thode pour recharger toutes les donn√©es li√©es au profil
  async forceReloadAllProfileData(userId: string): Promise<{
    profile: UserProfile | null;
    details: CompatibleProfile | null;
  }> {
    console.log('üîÑ ProfileService: Force reload ALL profile data for user:', userId);
    
    // Invalider tout le cache li√© √† cet utilisateur
    this.invalidateProfileCache(userId);
    
    // Charger en parall√®le le profil de base et les d√©tails complets
    const [profile, details] = await Promise.all([
      this.forceReloadProfile(userId),
      this.forceReloadProfileDetails(userId)
    ]);
    
    console.log('‚úÖ ProfileService: All profile data force reloaded');
    
    return { profile, details };
  }

  // M√©thode pour d√©boguer l'√©tat actuel du profil avec toutes les relations
  // (Duplicate removed)

  // M√©thode pour forcer un rechargement complet SANS CACHE du tout
  async forceReloadCompleteProfile(userId: string): Promise<UserProfile | null> {
    console.log('üî• ProfileService: FORCE COMPLETE RELOAD for user:', userId);
    
    try {
      // 1. R√©cup√©rer le profil de base sans cache
      console.log('üìä Step 1: Loading base profile...');
      const { data: baseProfile, error: baseError } = await supabase
        .from('profile')
        .select('*')
        .eq('id_user', userId)
        .single();

      if (baseError) {
        console.error('‚ùå Failed to load base profile:', baseError);
        return null;
      }

      console.log('‚úÖ Base profile loaded:', baseProfile);

      // 2. R√©cup√©rer la localisation si elle existe
      let location = null;
      if (baseProfile.id_location) {
        console.log('üìç Step 2: Loading location...');
        const { data: locationData, error: locationError } = await supabase
          .from('location')
          .select('*')
          .eq('id', baseProfile.id_location)
          .single();
        
        if (!locationError && locationData) {
          location = locationData;
          console.log('‚úÖ Location loaded:', location);
        } else {
          console.warn('‚ö†Ô∏è Failed to load location:', locationError);
        }
      }

      // 3. R√©cup√©rer la gym si elle existe
      let gym = null;
      if (baseProfile.id_gym) {
        console.log('üèãÔ∏è Step 3: Loading gym...');
        const { data: gymData, error: gymError } = await supabase
          .from('gym')
          .select('*')
          .eq('id', baseProfile.id_gym)
          .single();
        
        if (!gymError && gymData) {
          gym = gymData;
          console.log('‚úÖ Gym loaded:', gym);
        } else {
          console.warn('‚ö†Ô∏è Failed to load gym:', gymError);
        }
      }

      // 4. R√©cup√©rer l'abonnement gym si il existe
      let gymSubscription = null;
      if (baseProfile.id_gym_subscription) {
        console.log('üí≥ Step 4: Loading gym subscription...');
        const { data: gymSubData, error: gymSubError } = await supabase
          .from('gymsubscription')
          .select('*')
          .eq('id', baseProfile.id_gym_subscription)
          .single();
        
        if (!gymSubError && gymSubData) {
          gymSubscription = gymSubData;
          console.log('‚úÖ Gym subscription loaded:', gymSubscription);
        } else {
          console.warn('‚ö†Ô∏è Failed to load gym subscription:', gymSubError);
        }
      }

      // 5. R√©cup√©rer les sports
      console.log('üèÉ Step 5: Loading sports...');
      const { data: sports, error: sportsError } = await supabase
        .from('profilesport')
        .select(`
          *,
          sport(*),
          sportlevel(*)
        `)
        .eq('id_profile', baseProfile.id);

      if (sportsError) {
        console.warn('‚ö†Ô∏è Failed to load sports:', sportsError);
      } else {
        console.log('‚úÖ Sports loaded:', sports?.length || 0, 'items');
      }

      // 6. R√©cup√©rer les hobbies
      console.log('üéØ Step 6: Loading hobbies...');
      const { data: hobbies, error: hobbiesError } = await supabase
        .from('profilehobbie')
        .select(`
          *,
          hobbie(*)
        `)
        .eq('id_profile', baseProfile.id);

      if (hobbiesError) {
        console.warn('‚ö†Ô∏è Failed to load hobbies:', hobbiesError);
      } else {
        console.log('‚úÖ Hobbies loaded:', hobbies?.length || 0, 'items');
      }

      // 7. R√©cup√©rer les r√©seaux sociaux
      console.log('üì± Step 7: Loading social media...');
      const { data: socialMedias, error: socialError } = await supabase
        .from('profilesocialmedia')
        .select(`
          *,
          socialmedia(*)
        `)
        .eq('id_profile', baseProfile.id);

      if (socialError) {
        console.warn('‚ö†Ô∏è Failed to load social media:', socialError);
      } else {
        console.log('‚úÖ Social media loaded:', socialMedias?.length || 0, 'items');
      }

      // 8. Construire le profil complet
      const completeProfile = {
        ...baseProfile,
        location,
        gym,
        gymsubscription: gymSubscription,
        sports: sports || [],
        hobbies: hobbies || [],
        socialMedias: socialMedias || []
      };

      console.log('üéâ COMPLETE PROFILE ASSEMBLED:', {
        id: completeProfile.id,
        firstname: completeProfile.firstname,
        lastname: completeProfile.lastname,
        hasLocation: !!location,
        hasGym: !!gym,
        hasGymSubscription: !!gymSubscription,
        sportsCount: sports?.length || 0,
        hobbiesCount: hobbies?.length || 0,
        socialMediaCount: socialMedias?.length || 0
      });

      // 9. Mettre en cache le r√©sultat
      const cacheKey = `profile_${userId}`;
      const now = Date.now();
      ProfileService.profileCache.set(cacheKey, completeProfile);
      ProfileService.lastCacheUpdate.set(cacheKey, now);

      return completeProfile;

    } catch (error) {
      console.error('üí• ProfileService: CRITICAL ERROR in forceReloadCompleteProfile:', error);
      return null;
    }
  }

  // M√©thode pour vider TOUT le cache et recharger
  async nukeAndReload(userId: string): Promise<UserProfile | null> {
    console.log('üí£ ProfileService: NUKE AND RELOAD for user:', userId);
    
    // Vider tout le cache
    ProfileService.profileCache.clear();
    ProfileService.lastCacheUpdate.clear();
    
    // Recharger compl√®tement
    return this.forceReloadCompleteProfile(userId);
  }

  // M√©thode pour d√©boguer l'√©tat actuel du profil avec toutes les relations
  async debugProfile(userId: string): Promise<void> {
    console.log('üêõ ProfileService: Debug profile for user:', userId);
    
    try {
      // V√©rifier le profil de base
      const { data: baseProfile, error: baseError } = await supabase
        .from('profile')
        .select('*')
        .eq('id_user', userId)
        .single();

      if (baseError) {
        console.error('üêõ ProfileService: Debug - Profile not found:', baseError);
        return;
      }

      console.log('üêõ ProfileService: Debug - Base profile:', baseProfile);

      // V√©rifier la localisation
      if (baseProfile.id_location) {
        const { data: location } = await supabase
          .from('location')
          .select('*')
          .eq('id', baseProfile.id_location)
          .single();
        console.log('üêõ ProfileService: Debug - Location:', location);
      }

      // V√©rifier la gym
      if (baseProfile.id_gym) {
        const { data: gym } = await supabase
          .from('gym')
          .select('*')
          .eq('id', baseProfile.id_gym)
          .single();
        console.log('üêõ ProfileService: Debug - Gym:', gym);
      }

      // V√©rifier l'abonnement gym
      if (baseProfile.id_gym_subscription) {
        const { data: gymSub } = await supabase
          .from('gymsubscription')
          .select('*')
          .eq('id', baseProfile.id_gym_subscription)
          .single();
        console.log('üêõ ProfileService: Debug - Gym subscription:', gymSub);
      }

      // V√©rifier les sports
      const { data: sports } = await supabase
        .from('profilesport')
        .select(`
          *,
          sport(*),
          sportlevel(*)
        `)
        .eq('id_profile', baseProfile.id);
      console.log('üêõ ProfileService: Debug - Sports:', sports);

      // V√©rifier les hobbies
      const { data: hobbies } = await supabase
        .from('profilehobbie')
        .select(`
          *,
          hobbie(*)
        `)
        .eq('id_profile', baseProfile.id);
      console.log('üêõ ProfileService: Debug - Hobbies:', hobbies);

    } catch (err) {
      console.error('üêõ ProfileService: Debug - Unexpected error:', err);
    }
  }

  // M√©thode pour d√©boguer et afficher TOUTES les donn√©es en base
  async debugAndDisplayAllData(userId: string): Promise<void> {
    console.log('üîç ProfileService: =================================');
    console.log('üîç ProfileService: DEBUGGING ALL DATA FOR USER:', userId);
    console.log('üîç ProfileService: =================================');
    
    try {
      // 1. Profil de base
      const { data: baseProfile, error: baseError } = await supabase
        .from('profile')
        .select('*')
        .eq('id_user', userId)
        .single();

      console.log('üìä BASE PROFILE:');
      if (baseError) {
        console.error('‚ùå Error:', baseError);
      } else {
        console.log('‚úÖ Data:', baseProfile);
        console.log('üìç Location ID:', baseProfile?.id_location);
        console.log('üèãÔ∏è Gym ID:', baseProfile?.id_gym);
        console.log('üí≥ Gym Subscription ID:', baseProfile?.id_gym_subscription);
      }

      if (!baseProfile) return;

      // 2. Localisation
      if (baseProfile.id_location) {
        console.log('\nüìç LOCATION DATA:');
        const { data: location, error: locationError } = await supabase
          .from('location')
          .select('*')
          .eq('id', baseProfile.id_location)
          .single();
        
        if (locationError) {
          console.error('‚ùå Location Error:', locationError);
        } else {
          console.log('‚úÖ Location:', location);
        }
      } else {
        console.log('\nüìç NO LOCATION ID IN PROFILE');
      }

      // 3. Gym
      if (baseProfile.id_gym) {
        console.log('\nüèãÔ∏è GYM DATA:');
        const { data: gym, error: gymError } = await supabase
          .from('gym')
          .select('*')
          .eq('id', baseProfile.id_gym)
          .single();
        
        if (gymError) {
          console.error('‚ùå Gym Error:', gymError);
        } else {
          console.log('‚úÖ Gym:', gym);
        }
      } else {
        console.log('\nüèãÔ∏è NO GYM ID IN PROFILE');
      }

      // 4. Abonnement gym
      if (baseProfile.id_gym_subscription) {
        console.log('\nüí≥ GYM SUBSCRIPTION DATA:');
        const { data: gymSub, error: gymSubError } = await supabase
          .from('gymsubscription')
          .select('*')
          .eq('id', baseProfile.id_gym_subscription)
          .single();
        
        if (gymSubError) {
          console.error('‚ùå Gym Subscription Error:', gymSubError);
        } else {
          console.log('‚úÖ Gym Subscription:', gymSub);
        }
      } else {
        console.log('\nüí≥ NO GYM SUBSCRIPTION ID IN PROFILE');
      }

      // 5. Sports - requ√™te directe
      console.log('\nüèÉ SPORTS DATA:');
      const { data: sports, error: sportsError } = await supabase
        .from('profilesport')
        .select(`
          *,
          sport(*),
          sportlevel(*)
        `)
        .eq('id_profile', baseProfile.id);

      if (sportsError) {
        console.error('‚ùå Sports Error:', sportsError);
      } else {
        console.log(`‚úÖ Found ${sports?.length || 0} sports:`, sports);
      }

      // 6. Hobbies - requ√™te directe
      console.log('\nüéØ HOBBIES DATA:');
      const { data: hobbies, error: hobbiesError } = await supabase
        .from('profilehobbie')
        .select(`
          *,
          hobbie(*)
        `)
        .eq('id_profile', baseProfile.id);

      if (hobbiesError) {
        console.error('‚ùå Hobbies Error:', hobbiesError);
      } else {
        console.log(`‚úÖ Found ${hobbies?.length || 0} hobbies:`, hobbies);
      }

      // 7. R√©seaux sociaux
      console.log('\nüì± SOCIAL MEDIA DATA:');
      const { data: socialMedia, error: socialError } = await supabase
        .from('profilesocialmedia')
        .select(`
          *,
          socialmedia(*)
        `)
        .eq('id_profile', baseProfile.id);

      if (socialError) {
        console.error('‚ùå Social Media Error:', socialError);
      } else {
        console.log(`‚úÖ Found ${socialMedia?.length || 0} social medias:`, socialMedia);
      }

      console.log('\nüîç ProfileService: =================================');
      console.log('üîç ProfileService: END DEBUG');
      console.log('üîç ProfileService: =================================');

    } catch (error) {
      console.error('üí• ProfileService: Critical error in debugAndDisplayAllData:', error);
    }
  }

  // M√©thode pour forcer l'affichage de TOUTES les donn√©es
  async forceDisplayAllUserData(userId: string): Promise<UserProfile | null> {
    console.log('üî• ProfileService: FORCE DISPLAY ALL DATA for user:', userId);
    
    // D'abord d√©boguer pour voir ce qu'il y a en base
    await this.debugAndDisplayAllData(userId);
    
    // Puis recharger le profil complet
    return this.forceReloadCompleteProfile(userId);
  }

  // === Gym Subscription Management ===
  async updateGymSubscription(userId: string, gymId: string, subscriptionId: string): Promise<void> {
    try {
      console.log('üí≥ ProfileService: Updating gym subscription for user:', userId);
      console.log('üí≥ Raw Gym ID:', gymId, 'Raw Subscription ID:', subscriptionId);
      
      // Valider les param√®tres
      if (!userId || userId === 'undefined' || userId === 'null' || userId.trim() === '') {
        throw new Error('User ID invalide');
      }
      
      if (!gymId || gymId === 'undefined' || gymId === 'null' || gymId.trim() === '') {
        throw new Error('Gym ID invalide');
      }
      
      if (!subscriptionId || subscriptionId === 'undefined' || subscriptionId === 'null' || subscriptionId.trim() === '') {
        throw new Error('Subscription ID invalide');
      }

      // Nettoyer les IDs (convertir en entier si n√©cessaire)
      const cleanGymId = parseInt(gymId.toString(), 10);
      const cleanSubscriptionId = parseInt(subscriptionId.toString(), 10);
      
      if (isNaN(cleanGymId) || isNaN(cleanSubscriptionId)) {
        throw new Error('IDs doivent √™tre des nombres valides');
      }

      console.log('üí≥ Clean Gym ID:', cleanGymId, 'Clean Subscription ID:', cleanSubscriptionId);
      
      const { error } = await supabase
        .from('profile')
        .update({ 
          id_gym: cleanGymId,
          id_gym_subscription: cleanSubscriptionId 
        })
        .eq('id_user', userId);

      if (error) {
        console.error('‚ùå ProfileService: Gym subscription update failed:', error);
        throw error;
      }

      console.log('‚úÖ ProfileService: Gym subscription updated successfully');
      
      // Invalider le cache apr√®s mise √† jour
      this.invalidateProfileCache(userId);
      
      // Forcer le rechargement du profil
      await this.nukeAndReload(userId);
      
    } catch (error) {
      console.error('‚ùå ProfileService: Gym subscription update error:', error);
      throw error;
    }
  }

  async removeGymSubscription(userId: string): Promise<void> {
    try {
      console.log('üí≥ ProfileService: Removing gym subscription for user:', userId);
      
      const { error } = await supabase
        .from('profile')
        .update({ 
          id_gym: null,
          id_gym_subscription: null 
        })
        .eq('id_user', userId);

      if (error) {
        console.error('‚ùå ProfileService: Gym subscription removal failed:', error);
        throw error;
      }

      console.log('‚úÖ ProfileService: Gym subscription removed successfully');
      
      // Invalider le cache apr√®s suppression
      this.invalidateProfileCache(userId);
      
      // Forcer le rechargement du profil
      await this.nukeAndReload(userId);
      
    } catch (error) {
      console.error('‚ùå ProfileService: Gym subscription removal error:', error);
      throw error;
    }
  }

  // M√©thode pour r√©cup√©rer tous les abonnements d'une gym
  async getAllGymSubscriptions(): Promise<GymSubscription[]> {
    console.log('üí≥ ProfileService: Getting ALL gym subscriptions');
    
    try {
      const { data, error } = await supabase
        .from('gymsubscription')
        .select('*')
        .order('name');

      if (error) {
        console.error('‚ùå ProfileService: Error loading all gym subscriptions:', error);
        throw error;
      }

      console.log(`‚úÖ ProfileService: Found ${data?.length || 0} total subscriptions:`, data);
      return data || [];
    } catch (error) {
      console.error('‚ùå ProfileService: Exception in getAllGymSubscriptions:', error);
      return [];
    }
  }

  async getGymSubscriptions(gymId: string): Promise<GymSubscription[]> {
    console.log('üí≥ ProfileService: Getting subscriptions for gym:', gymId);
    
    // Valider que gymId est d√©fini et valide
    if (!gymId || gymId === 'undefined' || gymId === 'null' || gymId.trim() === '') {
      console.warn('‚ùå ProfileService: Invalid gym ID provided:', gymId);
      return [];
    }

    try {
      const { data, error } = await supabase
        .from('gymsubscription')
        .select('*')
        .eq('id_gym', gymId)
        .order('name');

      if (error) {
        console.error('‚ùå ProfileService: Error loading gym subscriptions:', error);
        throw error;
      }

      console.log(`‚úÖ ProfileService: Found ${data?.length || 0} subscriptions for gym ${gymId}:`, data);
      return data || [];
    } catch (error) {
      console.error('‚ùå ProfileService: Exception in getGymSubscriptions:', error);
      return [];
    }
  }

  // M√©thode pour r√©cup√©rer l'abonnement actuel d'un utilisateur
  async getUserGymSubscription(userId: string): Promise<{ gym: Gym | null; subscription: GymSubscription | null }> {
    console.log('üí≥ ProfileService: Getting current gym subscription for user:', userId);
    
    // Valider que userId est d√©fini et valide
    if (!userId || userId === 'undefined' || userId === 'null' || userId.trim() === '') {
      console.warn('‚ùå ProfileService: Invalid user ID provided:', userId);
      return { gym: null, subscription: null };
    }

    try {
      const { data: profile, error: profileError } = await supabase
        .from('profile')
        .select('id_gym, id_gym_subscription')
        .eq('id_user', userId)
        .single();

      if (profileError || !profile) {
        console.log('‚ùå ProfileService: Profile not found for user:', userId);
        return { gym: null, subscription: null };
      }

      let gym = null;
      let subscription = null;

      // R√©cup√©rer la gym si elle existe et est valide
      if (profile.id_gym && profile.id_gym !== 'undefined' && profile.id_gym !== 'null') {
        const { data: gymData, error: gymError } = await supabase
          .from('gym')
          .select('*')
          .eq('id', profile.id_gym)
          .single();
        
        if (!gymError && gymData) {
          gym = gymData;
          console.log('‚úÖ ProfileService: User gym found:', gym);
        }
      }

      // R√©cup√©rer l'abonnement si il existe et est valide
      if (profile.id_gym_subscription && profile.id_gym_subscription !== 'undefined' && profile.id_gym_subscription !== 'null') {
        const { data: subData, error: subError } = await supabase
          .from('gymsubscription')
          .select('*')
          .eq('id', profile.id_gym_subscription)
          .single();
        
        if (!subError && subData) {
          subscription = subData;
          console.log('‚úÖ ProfileService: User subscription found:', subscription);
        }
      }

      return { gym, subscription };
    } catch (error) {
      console.error('‚ùå ProfileService: Exception in getUserGymSubscription:', error);
      return { gym: null, subscription: null };
    }
  }
}

export const profileService = new ProfileService();
