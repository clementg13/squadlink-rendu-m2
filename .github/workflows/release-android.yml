name: Release Build with Gradle

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "tag=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Rendre le script ex√©cutable
        chmod +x scripts/generate-changelog.sh
        
        # G√©n√©rer le changelog pour cette version
        ./scripts/generate-changelog.sh "$VERSION"
        
        # V√©rifier si le changelog a √©t√© g√©n√©r√©
        if [ -f "CHANGELOG_${VERSION}.md" ]; then
          echo "generated=true" >> $GITHUB_OUTPUT
          echo "file=CHANGELOG_${VERSION}.md" >> $GITHUB_OUTPUT
          
          # Extraire un r√©sum√© pour le build message
          CHANGELOG_SUMMARY=$(head -1 "CHANGELOG_${VERSION}.md" | sed 's/# //')
          COMMIT_COUNT=$(grep "Nombre total de commits:" "CHANGELOG_${VERSION}.md" | sed 's/.*: //' || echo "N/A")
          BUILD_MESSAGE="${CHANGELOG_SUMMARY} - ${COMMIT_COUNT} commits"
          echo "build_message=${BUILD_MESSAGE}" >> $GITHUB_OUTPUT
        else
          echo "generated=false" >> $GITHUB_OUTPUT
          echo "build_message=Release $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      run: npm ci

    # 1. V√©rifier le lint et les tests
    - name: Run ESLint
      run: npm run lint:check

    - name: Run tests
      run: npm test -- --watchAll=false --passWithNoTests

    - name: Create environment file
      run: |
        echo "EXPO_PUBLIC_SUPABASE_URL=${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}" > .env
        echo "EXPO_PUBLIC_SUPABASE_KEY=${{ secrets.EXPO_PUBLIC_SUPABASE_KEY }}" >> .env
        # Ajouter SENTRY_AUTH_TOKEN si disponible (sera vide si non configur√©)
        echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
        echo "‚úÖ Fichier .env cr√©√© avec les variables d'environnement"

    # 2. Build Android APK with Gradle
    - name: Make gradlew executable
      run: chmod +x android/gradlew

    - name: Clean Gradle
      run: |
        cd android
        ./gradlew clean

    - name: Build Release APK
      run: |
        echo "üèóÔ∏è Building release APK with Gradle..."
        cd android
        ./gradlew assembleRelease
      env:
        NODE_ENV: production
        SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

    - name: Find APK file
      id: apk
      run: |
        APK_PATH=$(find android/app/build/outputs/apk/release -name "*.apk" -type f | head -1)
        if [ -n "$APK_PATH" ]; then
          echo "path=$APK_PATH" >> $GITHUB_OUTPUT
          APK_NAME="squadlink-${VERSION}-release.apk"
          echo "name=$APK_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ APK found at: $APK_PATH"
        else
          echo "‚ùå APK not found!"
          exit 1
        fi

    # 3. Create GitHub Release with APK and changelog
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        name: Release ${{ steps.version.outputs.tag }}
        body_path: ${{ steps.changelog.outputs.file }}
        files: |
          ${{ steps.apk.outputs.path }}
          ${{ steps.changelog.outputs.file }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
