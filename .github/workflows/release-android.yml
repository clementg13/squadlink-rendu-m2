name: Release Build with EAS

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "tag=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        # Rendre le script exÃ©cutable
        chmod +x scripts/generate-changelog.sh
        
        # GÃ©nÃ©rer le changelog pour cette version
        ./scripts/generate-changelog.sh "$VERSION"
        
        # VÃ©rifier si le changelog a Ã©tÃ© gÃ©nÃ©rÃ©
        if [ -f "CHANGELOG_${VERSION}.md" ]; then
          echo "generated=true" >> $GITHUB_OUTPUT
          echo "file=CHANGELOG_${VERSION}.md" >> $GITHUB_OUTPUT
          
          # Extraire un rÃ©sumÃ© pour le build message
          CHANGELOG_SUMMARY=$(head -1 "CHANGELOG_${VERSION}.md" | sed 's/# //')
          COMMIT_COUNT=$(grep "Nombre total de commits:" "CHANGELOG_${VERSION}.md" | sed 's/.*: //' || echo "N/A")
          BUILD_MESSAGE="${CHANGELOG_SUMMARY} - ${COMMIT_COUNT} commits"
          echo "build_message=${BUILD_MESSAGE}" >> $GITHUB_OUTPUT
        else
          echo "generated=false" >> $GITHUB_OUTPUT
          echo "build_message=Release $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Install dependencies
      run: npm ci

    # 1. VÃ©rifier le lint et les tests
    - name: Run ESLint
      run: npm run lint:check

    - name: Run tests
      run: npm test -- --watchAll=false --passWithNoTests

    # 2. Setup EAS CLI
    - name: Setup Expo and EAS CLI
      run: |
        npm install -g @expo/cli eas-cli

    - name: Authenticate with EAS
      run: |
        eas whoami
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    - name: Create environment file
      run: |
        echo "EXPO_PUBLIC_SUPABASE_URL=${{ secrets.EXPO_PUBLIC_SUPABASE_URL }}" > .env
        echo "EXPO_PUBLIC_SUPABASE_KEY=${{ secrets.EXPO_PUBLIC_SUPABASE_KEY }}" >> .env

    # 3. Single Production Build with Maestro Tests
    - name: Build Production with Maestro Tests
      run: |
        # Utiliser le message de build gÃ©nÃ©rÃ© par l'Ã©tape changelog
        BUILD_MESSAGE="${{ steps.changelog.outputs.build_message }}"
        echo "ðŸ“‹ Message de build: $BUILD_MESSAGE"
        echo "ðŸ§ª Building production with integrated Maestro tests..."
        
        # Utiliser le profil production qui construit et teste en une fois
        eas build --platform android --profile production --non-interactive --wait --message "$BUILD_MESSAGE"
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    # 4. Optionnel: Submit to Google Play Store (internal track)
    # - name: Submit to Google Play Store
    #   run: |
    #     eas submit --platform android --latest --non-interactive
    #   env:
    #     EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
