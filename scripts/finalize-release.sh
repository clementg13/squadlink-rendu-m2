#!/bin/bash

# Script pour finaliser le release (cr√©ation du tag)
# Usage: ./scripts/finalize-release.sh <version>
# Exemple: ./scripts/finalize-release.sh 1.2.0

set -e

# Couleurs pour les messages
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${GREEN}‚ÑπÔ∏è  $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rification des arguments
if [ $# -eq 0 ]; then
    log_error "Version requise. Usage: ./scripts/finalize-release.sh <version>"
    log_info "Exemple: ./scripts/finalize-release.sh 1.2.0"
    exit 1
fi

VERSION=$1

# Validation du format de version
if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    log_error "Format de version invalide. Utilisez le format: x.y.z (ex: 1.2.0)"
    exit 1
fi

TAG_NAME="v$VERSION"

log_info "Finalisation du release pour la version $VERSION"

# V√©rification que nous sommes sur la branche release
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "release" ]; then
    log_warning "Vous n'√™tes pas sur la branche release. Basculement..."
    git checkout release
fi

# V√©rification que le repository est propre
if [[ -n $(git status --porcelain) ]]; then
    log_error "Le repository a des modifications non commit√©es"
    exit 1
fi

# R√©cup√©ration des derni√®res modifications
log_info "R√©cup√©ration des derni√®res modifications de release..."
git fetch origin
git pull origin release

# V√©rification que le tag n'existe pas d√©j√†
if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
    log_error "Le tag $TAG_NAME existe d√©j√†"
    exit 1
fi

# V√©rification que les fichiers Android ont bien √©t√© modifi√©s
log_info "V√©rification des modifications dans build.gradle..."
if ! git log --oneline -10 | grep -i "version\|release" > /dev/null; then
    log_warning "Aucun commit r√©cent ne semble concerner la version. √ätes-vous s√ªr que la MR a √©t√© merg√©e ?"
    read -p "Continuer quand m√™me ? (y/N): " confirm
    if [[ $confirm != [yY] && $confirm != [yY][eE][sS] ]]; then
        log_error "Arr√™t du processus"
        exit 1
    fi
fi

# Cr√©ation du tag
log_info "Cr√©ation du tag $TAG_NAME..."
git tag -a "$TAG_NAME" -m "Release $VERSION"

# Push du tag
log_info "Push du tag $TAG_NAME..."
git push origin "$TAG_NAME"

log_info "‚úÖ Release $VERSION finalis√©e avec succ√®s!"
log_info "üìã Actions effectu√©es:"
echo "   ‚Ä¢ Tag $TAG_NAME cr√©√© sur la branche release"
echo "   ‚Ä¢ Tag pouss√© sur origin"
log_info "üöÄ Le build Android va d√©marrer automatiquement via GitHub Actions"
log_warning "üì± Surveillez l'onglet Actions de GitHub pour voir le progr√®s du build"

# Optionnel: retour sur main
read -p "Voulez-vous retourner sur la branche main ? (Y/n): " back_to_main
if [[ $back_to_main != [nN] && $back_to_main != [nN][oO] ]]; then
    git checkout main
    log_info "üîÑ Retour sur la branche main"
fi
